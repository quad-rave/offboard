#!/usr/bin/env python2
# vim:set ts=4 sw=4 et:

import rospy
import _thread as thread
import threading
import time
import mavros

from math import *
from mavros.utils import *
from mavros import setpoint as SP
#from tf.transformations import quaternion_from_euler
from mavros_msgs.srv import SetMode
from mavros_msgs.srv import CommandTOL
from mavros_msgs.srv import CommandBool
from std_msgs.msg import String
from mavros import command
# from mavros_msgs.msg import
# from mavsdk import System
from geometry_msgs.msg import TwistStamped
from geometry_msgs.msg import Vector3
from missions import *
from uav import UAV
from mission_factory import MissionFactory
from triangle_missions import TriangleLeader

## New task: selecting a leader which give commands from the gcs to the rest of the group
# the command is applied by the group.
# How do we make the connections 
# Create a mission which accepts its leader
def hmm(topic):
    print("hmmmmmmmm: " + topic.data)
def start_missions():
    rospy.init_node('destroyer')
    rate = rospy.Rate(10)

    # define the UAV objects
    uavs = []
    for i in range(3):
        uav = UAV("uav" + str(i))
        uavs.append(uav)
    time.sleep(5)
    # define a leader mission and assign it through one of the uav's, it doesnt matter which one
    leader_mission = TriangleLeader()
    leader_mission.uav_count = 3 #                               20                10  10
    leader_mission.point_cloud = [np.array([0,0,5]), np.array([0,0, 5]), np.array([0, 0,5])]
    uavs[0].assign_mission(leader_mission, "uav0")

    time.sleep(2)
    input()
    return



if __name__ == '__main__':
    try:
        start_missions()
    except rospy.ROSInterruptException:
        pass

'''
class Commander(UAV):
    def __init__(self, uav_name, team):
        super(Commander ,self).__init__(uav_name)
        self.team = team
        self.message_topic = None
    def give_command(self, gcs_message):
        self. = rospy.Publisher(""super(Commander, self).uav_name, String, queue_size = 10)
        super(Commander, self).add_info_transmitter(gcs_message)

class Slave(UAV):
    def __init__(self, uav_name, leader):
        super(Slave, self).__init__(uav_name)
        self.leader = leader
        self.message = None
    def receive_command(self, gcs_message):
        self.message = super(Slave, self).get_info_transmitter()
'''
