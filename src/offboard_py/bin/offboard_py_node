#!/usr/bin/env python2
# vim:set ts=4 sw=4 et:
import rospy
import _thread as thread
import threading
import time
import mavros

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from tf.transformations import quaternion_from_euler
from mavros_msgs.srv import SetMode
from mavros_msgs.srv import CommandTOL
from mavros_msgs.srv import CommandBool
from std_msgs.msg import String
from mavros import command
#from mavros_msgs.msg import 
from mavsdk import System

class Simulation:
    def __init__(self):
        self.uavs = None
    def set_namespace(self, uav_count=3):
        self.uavs = [UAV("uav{}".format(i)) for i in range(uav_count)]
    
    
def start_missions():   
    rospy.init_node('setpoint_position_demo')

    sim = Simulation()
    sim.set_namespace()
    rate = rospy.Rate(10) 

    mission = TakeOff(sim.uavs[0],rate)
    mission.wait_for_mission()

class UAV:
    
    def __init__(self, uav_name):
        self.uav_name = uav_name
        self.pub_state = rospy.Publisher("sqr_state", String, queue_size = 10)
        self.pub = rospy.Publisher(uav_name +'/mavros/setpoint_position/local', SP.PoseStamped, queue_size=10)
        self.sub = rospy.Subscriber(uav_name + '/mavros/local_position/pose', SP.PoseStamped, self.read_position_from_topic)
        self.offb_set_mode = SetMode()
        self.arming_cl = rospy.ServiceProxy(uav_name +'/mavros/cmd/arming', CommandBool)
        self.takeoff_cl = rospy.ServiceProxy(uav_name +'/mavros/cmd/takeoff', CommandTOL)
        self.change_mode = rospy.ServiceProxy(uav_name +'/mavros/set_mode', SetMode)
        #a = SP.PoseStamped()
        #a.pose.position.x
        # current physical position
        self.pose_stamped =  SP.PoseStamped(
            header=SP.Header(
            frame_id="base_footprint",  # no matter, plugin don't use TF
            stamp=rospy.Time.now()),    # stamp should update
        )
    def get_current_pose(self):
        return self.pose_stamped

    def read_position_from_topic(self, topic):
        self.pose_stamped = topic
    
    

    # send target position to drone
    def set_target_pose(self,x,y,z):
        msg = SP.PoseStamped(
            header=SP.Header(
            frame_id="base_footprint",  # no matter, plugin don't use TF
            stamp=rospy.Time.now()),    # stamp should update
        )

        msg.pose.position.x = x
        msg.pose.position.y = y
        msg.pose.position.z = z
        # For demo purposes we will lock yaw/heading to north.
        yaw_degrees = 0  # North
        yaw = radians(yaw_degrees)
        quaternion = quaternion_from_euler(0, 0, yaw)
        msg.pose.orientation = SP.Quaternion(*quaternion)
        self.pub.publish(msg)
        

    def arm(self,bool):
        rospy.wait_for_service(self.uav_name + '/mavros/cmd/arming')
        response = self.arming_cl(value = True)
        rospy.loginfo(response)
    def set_offboard(self):
        rospy.wait_for_service(self.uav_name + '/mavros/set_mode')
        response = self.change_mode(custom_mode="OFFBOARD")
        rospy.loginfo(response)



class Mission:
    def __init__(self, uav, rate):
        self.uav = uav
        self.rate = rate # her callback'te bekleme frekansÄ±.
    
    def wait_for_mission(self):
        while(True):
            if(self.mission_ended()):
                print("MISSION ENDED")
                break
            else:
                self.mission_loop()      
                print("MISSION LOOP END")
            #rospy.spinOnce()     
            print("WHILE END0") 
            self.rate.sleep()
            print("WHILE END1")
    
    def mission_loop(self):
        print("PROBLEM0")
        pass

    def mission_ended(self):
        print("PROBLEM1")
        return False

class TakeOff(Mission):
    def __init__(self, uav, rate):
        super().__init__(uav, rate)
        uav_start_pose = uav.get_current_pose()
        self.setpoint = SetpointPosition(uav, rate ,uav_start_pose.pose.position.x, uav_start_pose.pose.position.y, uav_start_pose.pose.position.z + 5)



    def mission_loop(self):
        self.uav.arm(True)
        self.uav.set_offboard()

        self.setpoint.mission_loop()
    
    def mission_ended(self):
        return self.setpoint.mission_ended()

class SetpointPosition(Mission):
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self, uav, rate ,x,y,z):
        super().__init__(uav,rate)
        self.x = x
        self.y = y
        self.z = z


    def mission_loop(self):
        print("SETPOINT MISSION LOOP")
        self.uav.set_target_pose(self.x,self.y,self.z)

    def mission_ended(self):
        current_pos = self.uav.get_current_pose()

        def is_near(cur, tar):
            return abs(cur - tar) < 0.5
        print("weird: " ,current_pos)
        if is_near(current_pos.pose.position.x, self.x) and \
            is_near(current_pos.pose.position.y, self.y) and \
            is_near(current_pos.pose.position.z, self.z):
            return True
        return False

if __name__ == '__main__':
    try:
        start_missions()
    except rospy.ROSInterruptException:
        pass
