#!/usr/bin/env python2
# vim:set ts=4 sw=4 et:
import rospy
import _thread as thread
import threading
import time
import mavros

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from tf.transformations import quaternion_from_euler
from mavros_msgs.srv import SetMode
from mavros_msgs.srv import CommandTOL
from mavros_msgs.srv import CommandBool
from std_msgs.msg import String
from mavros import command
#from mavros_msgs.msg import 
from mavsdk import System

class SetpointPosition:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        print("default namespace: " + mavros.DEFAULT_NAMESPACE) 
        self.pub_state = rospy.Publisher("sqr_state", String, queue_size = 10)
        self.pub = rospy.Publisher('uav0/mavros/setpoint_position/pose', SP.PoseStamped, queue_size=10)
        # publisher for mavros/setpoint_position/local
        #self.pub = SP.get_pub_position_local(queue_size=10)
        # subscriber for mavros/local_position/local
        self.sub = rospy.Subscriber('uav0/mavros/local_position/pose', SP.PoseStamped, self.reached)

        self.offb_set_mode = SetMode()

        self.arming_cl = rospy.ServiceProxy('uav0/mavros/cmd/arming', CommandBool)
        self.takeoff_cl = rospy.ServiceProxy('uav0/mavros/cmd/takeoff', CommandTOL)
        self.change_mode = rospy.ServiceProxy('uav0/mavros/set_mode', SetMode)
        try:
            thread.start_new_thread(self.navigate, ())
        except:
            fault("Error: Unable to start thread")

        # TODO(simon): Clean this up.
        self.done = False
        self.done_evt = threading.Event()

    def navigate(self):
        rate = rospy.Rate(10)   # 10hz

        msg = SP.PoseStamped(
            header=SP.Header(
                frame_id="base_footprint",  # no matter, plugin don't use TF
                stamp=rospy.Time.now()),    # stamp should update
        )
        while not rospy.is_shutdown():
            rospy.wait_for_service('uav0/mavros/cmd/arming')
            response = self.arming_cl(value = True)
            rospy.loginfo(response)

            rospy.wait_for_service('uav0/mavros/set_mode')
            response = self.change_mode(custom_mode="OFFBOARD")
            rospy.loginfo(response)


            msg.pose.position.x = self.x
            msg.pose.position.y = self.y
            msg.pose.position.z = self.z
            # For demo purposes we will lock yaw/heading to north.
            yaw_degrees = 0  # North
            yaw = radians(yaw_degrees)
            quaternion = quaternion_from_euler(0, 0, yaw)
            msg.pose.orientation = SP.Quaternion(*quaternion)

            self.pub.publish(msg)
            rate.sleep()

    def set(self, x, y, z, delay=0, wait=True):
        self.done = False
        self.x = x
        self.y = y
        self.z = z

        if wait:
            rate = rospy.Rate(5)
            while not self.done and not rospy.is_shutdown():
                rate.sleep()
        time.sleep(delay)

    def reached(self, topic):
        def is_near(msg, x, y):
            rospy.logdebug("Position %s: local: %d, target: %d, abs diff: %d",
                           msg, x, y, abs(x - y))
            return abs(x - y) < 0.5

        if is_near('X', topic.pose.position.x, self.x) and \
           is_near('Y', topic.pose.position.y, self.y) and \
           is_near('Z', topic.pose.position.z, self.z):
            self.done = True
            self.done_evt.set()


def setpoint_demo():
    rospy.init_node('setpoint_position_demo')
    mavros.set_namespace()  # initialize mavros module with default namespace
    rate = rospy.Rate(10)

    setpoint = SetpointPosition()


    setpoint.pub_state.publish(str(0))


    mavros.set_namespace()
    #command.arming(True)
    setpoint.pub_state.publish(str(1))

    setpoint.set(0.0, 0.0, 5.0, 5)
    '''
    rospy.wait_for_service('uav0/mavros/cmd/arming')
    response = setpoint.arming_cl(value = True)
    rospy.loginfo(response)

    time.sleep(5)

    rospy.wait_for_service('uav0/mavros/cmd/takeoff')
    response = setpoint.takeoff_cl(altitude=10, latitude=0, longitude=0, min_pitch=0, yaw=0)
    rospy.loginfo(response)
    
    time.sleep(6)
    #return

    rospy.wait_for_service('uav0/mavros/set_mode')
    response = setpoint.change_mode(custom_mode="OFFBOARD")
    rospy.loginfo(response)

    #rospy.wait_for_service('uav0/mavros/set_mode')
    #flightModeService = rospy.ServiceProxy('uav0/mavros/set_mode', SetMode)
    #flightModeService(custom_mode='OFFBOARD')
    '''


    setpoint.pub_state.publish(str(2))
    setpoint.set(10.0, 0.0, 5.0, 5)
    setpoint.pub_state.publish(str(3))
    setpoint.set(10.0, 10.0, 5.0, 5)
    setpoint.pub_state.publish(str(4))
    setpoint.set(0.0, 10.0, 5.0, 5)
    setpoint.pub_state.publish(str(5))
    setpoint.set(0.0, 0.0, 5.0, 5)
    setpoint.pub_state.publish(str(6))
    setpoint.set(0.0, 0.0,  0.0, 5)
    

    rospy.loginfo("Bye!")
    


if __name__ == '__main__':
    try:
        setpoint_demo()
    except rospy.ROSInterruptException:
        pass
'''
 def talker():
     pub = rospy.Publisher('chatter', String, queue_size=10)
     rospy.init_node('talker', anonymous=True)
     rate = rospy.Rate(10) # 10hz
       while not rospy.is_shutdown():
           hello_str = "hello world %s" % rospy.get_time()
           rospy.loginfo(hello_str)
           pub.publish(hello_str)
           rate.sleep()
   
   if __name__ == '__main__':
       try:
           talker()
       except rospy.ROSInterruptException:
           pass
'''