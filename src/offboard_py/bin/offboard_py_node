#!/usr/bin/env python2
# vim:set ts=4 sw=4 et:

import rospy
import _thread as thread
import threading
import time
import mavros

from math import *
from mavros.utils import *
from mavros import setpoint as SP
#from tf.transformations import quaternion_from_euler
from mavros_msgs.srv import SetMode
from mavros_msgs.srv import CommandTOL
from mavros_msgs.srv import CommandBool
from std_msgs.msg import String
from mavros import command
# from mavros_msgs.msg import
# from mavsdk import System
from geometry_msgs.msg import TwistStamped
from geometry_msgs.msg import Vector3
from missions import *
from uav import UAV
from mission_factory import MissionFactory
from triangle_missions import TriangleLeader
from triangle_missions_decentralized import TriangleMember

## New task: selecting a leader which give commands from the gcs to the rest of the group
# the command is applied by the group.
# How do we make the connections 
# Create a mission which accepts its leader
def hmm(topic):
    print("hmmmmmmmm: " + topic.data)
def start_missions():
    rospy.init_node('destroyer')
    rate = rospy.Rate(10)

    # define the UAV objects
    uavs = []
    for i in range(6):
        uav = UAV("uav" + str(i))
        uavs.append(uav)
    time.sleep(3)

    # define a mission and assign it to uavs
    member_mission = TriangleMember()
    member_mission.uav_count = 6


    point_cloud = [np.array([6,10,5]), np.array([3,5, 5]), np.array([9, 5,5]), np.array([0, 0,5]), np.array([6, 0,5]), np.array([12, 0,5]) ]

    for i in range(6):
        member_mission.uav_id = i    
        uavs[i].assign_mission(member_mission, ("uav" + str(i)))
    
    time.sleep(2)
    point_cloud_info = VectorArrayInfo("/triangle_mission/point_cloud")
    point_cloud_info.value = point_cloud
    point_cloud_info.publish_data()
    time.sleep(20)
    # flip positions
    for i in range(6):
        point_cloud_info.value[i] = point_cloud[5 - i]
    point_cloud_info.publish_data()
    #for i in rate(6):
    #    point_cloud_info.publish_data()
    #    time.sleep(2)

    input()
    
    return



if __name__ == '__main__':
    try:
        start_missions()
    except rospy.ROSInterruptException:
        pass

