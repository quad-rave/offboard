#!/usr/bin/env python2
# vim:set ts=4 sw=4 et:

import rospy
import _thread as thread
import threading
import time
import mavros

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from tf.transformations import quaternion_from_euler
from mavros_msgs.srv import SetMode
from mavros_msgs.srv import CommandTOL
from mavros_msgs.srv import CommandBool
from std_msgs.msg import String
from mavros import command
#from mavros_msgs.msg import 
#from mavsdk import System
from geometry_msgs.msg import TwistStamped
from geometry_msgs.msg import Vector3
from missions import *

## New task: selecting a leader which give commands from the gcs to the rest of the group
# the command is applied by the group.
# How do we make the connections 
# Create a mission which accepts its leader

def start_missions():   
    rospy.init_node('destroyer')
    rate = rospy.Rate(10) 


    uavs = []
    for i in range(3):
        uav = UAV("uav" + str(i))
        uavs.append(uav)

    # define a leader mission and make it into a string
    leader_mission = FormationLeader()
    mission_factory = MissionFactory(get_missiontype_to_constructor())
    mission_buffer = mission_factory.buffer_from_mission(leader_mission)
    msg = mission_buffer.to_string()

    # publish the msg to assign the mission to the leader
    topic = "uav0" +'/mission_assign'
    mission_pub = rospy.Publisher(topic, String, queue_size=10)
    mission_pub.publish(msg)
        
    
        
    while input() != '.':
        time.sleep()







if __name__ == '__main__':
    try:
        start_missions()
    except rospy.ROSInterruptException:
        pass


'''
class Commander(UAV):
    def __init__(self, uav_name, team):
        super(Commander ,self).__init__(uav_name)
        self.team = team
        self.message_topic = None
    def give_command(self, gcs_message):
        self. = rospy.Publisher(""super(Commander, self).uav_name, String, queue_size = 10)
        super(Commander, self).add_info_transmitter(gcs_message)

class Slave(UAV):
    def __init__(self, uav_name, leader):
        super(Slave, self).__init__(uav_name)
        self.leader = leader
        self.message = None
    def receive_command(self, gcs_message):
        self.message = super(Slave, self).get_info_transmitter()
'''